import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
import requests
from datetime import datetime
import json
import os
import random
import logging
from dotenv import load_dotenv

logging.basicConfig(
    filename='bot.log',
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    encoding='utf-8'
)

load_dotenv()
VK_TOKEN = os.getenv('VK_TOKEN')
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')
GROUP_ID = os.getenv('GROUP_ID')

vk_session = vk_api.VkApi(token=VK_TOKEN)
vk = vk_session.get_api()
longpoll = VkBotLongPoll(vk_session, GROUP_ID)

user_states = {}

def get_weather(city: str, period: str = 'today') -> str:
    try:
        base_url = "http://api.openweathermap.org/data/2.5/"
        params = {
            'q': city,
            'appid': WEATHER_API_KEY,
            'units': 'metric',
            'lang': 'ru'
        }

        if period == 'today':
            url = f"{base_url}weather"
            response = requests.get(url, params=params, timeout=5).json()

            if response.get('cod') != 200:
                return None
            return format_current_weather(response)

        elif period == 'week':
            url = f"{base_url}forecast"
            response = requests.get(url, params=params, timeout=5).json()

            if response.get('cod') != '200':
                return None
            return format_forecast(response)

    except Exception as e:
        logging.error(f"[–û–®–ò–ë–ö–ê API]: {e}")
        return None

def format_current_weather(data: dict) -> str:
    return (
        f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {data['name']}:\n"
        f"üå° {data['main']['temp']:.1f}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è {data['main']['feels_like']:.1f}¬∞C)\n"
        f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['main']['humidity']}%\n"
        f"üå¨ –í–µ—Ç–µ—Ä: {data['wind']['speed']} –º/—Å\n"
        f"‚òÅÔ∏è {data['weather'][0]['description'].capitalize()}"
    )

def format_forecast(data: dict) -> str:
    forecast = {}
    for item in data['list']:
        date = item['dt_txt'].split()[0]
        hour = int(item['dt_txt'].split()[1].split(':')[0])
        if 11 <= hour <= 14:
            if date not in forecast:
                forecast[date] = {
                    'min': item['main']['temp_min'],
                    'max': item['main']['temp_max'],
                    'desc': item['weather'][0]['description']
                }

    result = ["üìÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –¥–Ω—è:"]
    for date, values in list(forecast.items())[:2]:
        day_name = datetime.strptime(date, '%Y-%m-%d').strftime('%a (%d.%m)')
        result.append(f"{day_name}: {values['min']:.1f}..{values['max']:.1f}¬∞C, {values['desc'].capitalize()}")

    return "\n".join(result)

def create_keyboard():
    return {
        "one_time": False,
        "buttons": [
            [{
                "action": {
                    "type": "text",
                    "label": "üå§ –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å",
                    "payload": "{\"type\":\"current\"}"
                },
                "color": "positive"
            }],
            [{
                "action": {
                    "type": "text",
                    "label": "üìÖ –ü–æ–≥–æ–¥–∞ –Ω–∞ 2 –¥–Ω—è",
                    "payload": "{\"type\":\"forecast\"}"
                },
                "color": "primary"
            }]
        ]
    }

def send_message(user_id: int, text: str):
    try:
        vk.messages.send(
            user_id=user_id,
            message=text,
            random_id=random.randint(1, 2**31 - 1),
            keyboard=json.dumps(create_keyboard())
        )
        logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {text}")
        print(f"[SEND] -> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {text}")
    except Exception as e:
        logging.error(f"[–û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò]: {e}")
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ.")

for event in longpoll.listen():
    if event.type == VkBotEventType.MESSAGE_NEW:
        try:
            msg = event.object.message
            user_id = msg['from_id']
            text = msg['text'].strip().lower()

            logging.info(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {text}")
            print(f"[RECV] <- {user_id}: {text}")

            user_state = user_states.get(user_id)

            if user_state == 'current_weather':
                weather = get_weather(text, 'today')
                if weather:
                    send_message(user_id, weather)
                else:
                    send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{text}'")
                user_states[user_id] = None
                continue

            elif user_state == 'forecast_weather':
                weather = get_weather(text, 'week')
                if weather:
                    send_message(user_id, weather)
                else:
                    send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{text}'")
                user_states[user_id] = None
                continue

            text = text.lower()
            
            if text in ['–ø—Ä–∏–≤–µ—Ç', '–Ω–∞—á–∞—Ç—å', '—Å—Ç–∞—Ä—Ç']:
                greeting = (
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã.\n"
                    "–í—ã –º–æ–∂–µ—Ç–µ:\n"
                    "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å üå§ —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É ‚Äî –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å¬ª\n"
                    "‚Ä¢ –£–∑–Ω–∞—Ç—å üìÖ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 2 –¥–Ω—è –≤–ø–µ—Ä–µ–¥ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–≥–æ–¥–∞ –Ω–∞ 2 –¥–Ω—è¬ª\n\n"
                    "üìå –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "‚Ä¢ `–ø–æ–≥–æ–¥–∞ –ú–æ—Å–∫–≤–∞ —Å–µ–π—á–∞—Å`\n"
                    "‚Ä¢ `–ø–æ–≥–æ–¥–∞ –ú–æ—Å–∫–≤–∞ –Ω–∞ 2 –¥–Ω—è`"
                )
                send_message(user_id, greeting)
                user_states[user_id] = None
                continue

            elif text in ['üå§ –ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å', '–ø–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å', '–ø–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è']:
                user_states[user_id] = 'current_weather'
                send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã:")
                continue

            elif text in ['üìÖ –ø–æ–≥–æ–¥–∞ –Ω–∞ 2 –¥–Ω—è', '–ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã', '–ø–æ–≥–æ–¥–∞ –Ω–∞ 2 –¥–Ω—è' ]:
                user_states[user_id] = 'forecast_weather'
                send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 2 –¥–Ω—è:")
                continue

            elif text.startswith('–ø–æ–≥–æ–¥–∞'):
                parts = text.split(maxsplit=2)
                city = parts[1] if len(parts) > 1 else None
                period = 'today'

                if len(parts) == 3 and '2' in parts[2]:
                    period = 'week'

                if not city:
                    send_message(user_id, "‚ÑπÔ∏è –í–≤–µ–¥–∏—Ç–µ: –ø–æ–≥–æ–¥–∞ [–≥–æ—Ä–æ–¥] [–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å/–ü–æ–≥–æ–¥–∞ –Ω–∞ 2 –¥–Ω—è]")
                else:
                    weather_info = get_weather(city, period)
                    if weather_info:
                        send_message(user_id, weather_info)
                    else:
                        send_message(user_id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'")
                user_states[user_id] = None
                continue

            send_message(user_id, "–Ø –±–æ—Ç –ø–æ–≥–æ–¥—ã. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            user_states[user_id] = None

        except Exception as e:
            logging.error(f"[–û–®–ò–ë–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø]: {e}")
            print(f"[ERROR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
